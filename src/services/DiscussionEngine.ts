
interface ConversationMemory {
  id: string;
  messages: Array<{
    role: 'user' | 'assistant';
    content: string;
    timestamp: Date;
    context?: string;
  }>;
  userProfile: {
    name?: string;
    preferences: string[];
    interests: string[];
  };
  sessionStartTime: Date;
  lastInteraction: Date;
}

interface DiscussionState {
  isProcessing: boolean;
  canBeInterrupted: boolean;
  currentTask?: string;
  emotionalState: 'neutral' | 'happy' | 'thinking' | 'listening';
}

export class DiscussionEngine {
  private memory: ConversationMemory;
  private state: DiscussionState;
  private interruptionCallback?: () => void;
  private stateChangeCallback?: (state: DiscussionState) => void;

  constructor() {
    this.memory = {
      id: this.generateConversationId(),
      messages: [],
      userProfile: {
        preferences: [],
        interests: []
      },
      sessionStartTime: new Date(),
      lastInteraction: new Date()
    };

    this.state = {
      isProcessing: false,
      canBeInterrupted: true,
      emotionalState: 'neutral'
    };
  }

  private generateConversationId(): string {
    return `conv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  public setInterruptionCallback(callback: () => void) {
    this.interruptionCallback = callback;
  }

  public setStateChangeCallback(callback: (state: DiscussionState) => void) {
    this.stateChangeCallback = callback;
  }

  private updateState(updates: Partial<DiscussionState>) {
    this.state = { ...this.state, ...updates };
    this.stateChangeCallback?.(this.state);
  }

  public async processUserInput(input: string): Promise<string> {
    console.log('üìù Processing user input:', input);
    
    // Ajouter le message utilisateur √† la m√©moire
    this.addToMemory('user', input);
    
    // Mettre √† jour l'√©tat
    this.updateState({ 
      isProcessing: true, 
      canBeInterrupted: false,
      emotionalState: 'thinking',
      currentTask: 'processing_input'
    });

    try {
      // Analyser le contexte et l'intention
      const context = this.analyzeContext(input);
      
      // G√©n√©rer une r√©ponse contextuelle
      const response = await this.generateContextualResponse(input, context);
      
      // Ajouter la r√©ponse √† la m√©moire
      this.addToMemory('assistant', response, context);
      
      // Mettre √† jour l'√©tat
      this.updateState({
        isProcessing: false,
        canBeInterrupted: true,
        emotionalState: 'happy',
        currentTask: undefined
      });

      return response;
    } catch (error) {
      console.error('‚ùå Erreur lors du traitement:', error);
      this.updateState({
        isProcessing: false,
        canBeInterrupted: true,
        emotionalState: 'neutral',
        currentTask: undefined
      });
      throw error;
    }
  }

  private addToMemory(role: 'user' | 'assistant', content: string, context?: string) {
    this.memory.messages.push({
      role,
      content,
      context,
      timestamp: new Date()
    });
    
    this.memory.lastInteraction = new Date();
    
    // Limiter la m√©moire √† 50 messages pour √©viter la surcharge
    if (this.memory.messages.length > 50) {
      this.memory.messages = this.memory.messages.slice(-50);
    }

    // Analyser les pr√©f√©rences utilisateur
    if (role === 'user') {
      this.updateUserProfile(content);
    }
  }

  private updateUserProfile(userInput: string) {
    const input = userInput.toLowerCase();
    
    // D√©tecter les int√©r√™ts
    const interests = ['technologie', 'art', 'musique', 'sport', 'cin√©ma', 'lecture', 'voyage'];
    interests.forEach(interest => {
      if (input.includes(interest) && !this.memory.userProfile.interests.includes(interest)) {
        this.memory.userProfile.interests.push(interest);
      }
    });

    // D√©tecter les pr√©f√©rences de communication
    if (input.includes('d√©tail') || input.includes('pr√©cis')) {
      if (!this.memory.userProfile.preferences.includes('detailed_responses')) {
        this.memory.userProfile.preferences.push('detailed_responses');
      }
    }
    
    if (input.includes('simple') || input.includes('bref')) {
      if (!this.memory.userProfile.preferences.includes('concise_responses')) {
        this.memory.userProfile.preferences.push('concise_responses');
      }
    }
  }

  private analyzeContext(input: string): string {
    const recentMessages = this.memory.messages.slice(-5);
    const hasRecentContext = recentMessages.length > 0;
    
    if (hasRecentContext) {
      const lastAssistantMessage = recentMessages
        .reverse()
        .find(msg => msg.role === 'assistant');
      
      if (lastAssistantMessage) {
        return `Contexte r√©cent: ${lastAssistantMessage.content.substring(0, 100)}...`;
      }
    }
    
    return 'Nouvelle conversation';
  }

  private async generateContextualResponse(input: string, context: string): Promise<string> {
    // Simuler un d√©lai de traitement r√©aliste
    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 1500));

    const userPreferences = this.memory.userProfile.preferences;
    const userInterests = this.memory.userProfile.interests;
    const conversationHistory = this.memory.messages.slice(-3);
    
    // R√©ponses contextuelles bas√©es sur l'historique
    const responses = this.getContextualResponses(input, conversationHistory, userInterests, userPreferences);
    
    // S√©lectionner une r√©ponse appropri√©e
    return this.selectBestResponse(responses, input);
  }

  private getContextualResponses(
    input: string, 
    history: typeof this.memory.messages,
    interests: string[],
    preferences: string[]
  ): string[] {
    const responses: string[] = [];
    const inputLower = input.toLowerCase();

    // R√©ponses bas√©es sur l'historique
    if (history.length > 0) {
      const lastTopic = history[history.length - 1]?.content;
      if (lastTopic) {
        responses.push(`En lien avec notre discussion pr√©c√©dente sur "${lastTopic.substring(0, 50)}...", je dirais que ${this.generateFollowUp(input)}`);
      }
    }

    // R√©ponses bas√©es sur les int√©r√™ts
    const matchedInterest = interests.find(interest => inputLower.includes(interest));
    if (matchedInterest) {
      responses.push(`Je vois que vous vous int√©ressez √† ${matchedInterest}. ${this.generateInterestBasedResponse(input, matchedInterest)}`);
    }

    // R√©ponses g√©n√©riques am√©lior√©es
    responses.push(this.generateAdvancedResponse(input));

    return responses;
  }

  private generateFollowUp(input: string): string {
    const followUps = [
      "voici une perspective compl√©mentaire int√©ressante.",
      "cela ouvre de nouvelles possibilit√©s √† explorer.",
      "c'est effectivement un point important √† consid√©rer.",
      "voici comment on peut approfondir cette id√©e."
    ];
    return followUps[Math.floor(Math.random() * followUps.length)];
  }

  private generateInterestBasedResponse(input: string, interest: string): string {
    const interestResponses: Record<string, string[]> = {
      'technologie': [
        "L'√©volution technologique dans ce domaine est fascinante.",
        "C'est un secteur qui √©volue tr√®s rapidement ces derni√®res ann√©es.",
        "Les innovations r√©centes dans ce domaine sont impressionnantes."
      ],
      'art': [
        "L'art est un moyen d'expression unique et personnel.",
        "Chaque forme d'art apporte sa propre richesse culturelle.",
        "L'interpr√©tation artistique est toujours subjective et enrichissante."
      ]
    };

    const responses = interestResponses[interest] || ["C'est un sujet passionnant !"];
    return responses[Math.floor(Math.random() * responses.length)];
  }

  private generateAdvancedResponse(input: string): string {
    const advancedResponses = [
      "Bas√© sur mon analyse, voici une approche structur√©e pour aborder cette question :",
      "En consid√©rant diff√©rents angles d'approche, je pense que :",
      "D'apr√®s les meilleures pratiques dans ce domaine, voici ce que je recommande :",
      "En synth√©tisant les informations disponibles, voici ma perspective :"
    ];

    const contextualInfo = [
      "Cette approche s'est r√©v√©l√©e efficace dans des situations similaires.",
      "Les retours d'exp√©rience montrent que cette m√©thode donne de bons r√©sultats.",
      "Cette strat√©gie permet g√©n√©ralement d'obtenir des r√©sultats satisfaisants.",
      "Cette approche √©quilibr√©e prend en compte les diff√©rents aspects du probl√®me."
    ];

    const intro = advancedResponses[Math.floor(Math.random() * advancedResponses.length)];
    const context = contextualInfo[Math.floor(Math.random() * contextualInfo.length)];

    return `${intro} ${context}`;
  }

  private selectBestResponse(responses: string[], input: string): string {
    // Pour cette version, on prend la premi√®re r√©ponse contextuelle
    // Dans une version plus avanc√©e, on pourrait utiliser un scoring plus sophistiqu√©
    return responses[0] || "Je comprends votre question et voici ma r√©flexion sur le sujet.";
  }

  public interrupt(): boolean {
    if (this.state.canBeInterrupted) {
      console.log('üîÑ Interruption d√©tect√©e et accept√©e');
      this.updateState({
        isProcessing: false,
        emotionalState: 'listening',
        currentTask: undefined
      });
      this.interruptionCallback?.();
      return true;
    }
    
    console.log('‚ö†Ô∏è Interruption ignor√©e - traitement critique en cours');
    return false;
  }

  public getState(): DiscussionState {
    return { ...this.state };
  }

  public getMemoryStats() {
    return {
      totalMessages: this.memory.messages.length,
      sessionDuration: Date.now() - this.memory.sessionStartTime.getTime(),
      userInterests: this.memory.userProfile.interests,
      userPreferences: this.memory.userProfile.preferences,
      lastInteraction: this.memory.lastInteraction
    };
  }

  public exportMemory() {
    return {
      conversationId: this.memory.id,
      messages: this.memory.messages,
      userProfile: this.memory.userProfile,
      stats: this.getMemoryStats()
    };
  }
}
