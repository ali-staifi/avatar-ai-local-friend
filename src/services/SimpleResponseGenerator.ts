
import { SupportedLanguage } from '@/types/speechRecognition';

interface ResponseContext {
  language: SupportedLanguage;
  userInput: string;
  isGreeting?: boolean;
  isQuestion?: boolean;
}

export class SimpleResponseGenerator {
  private responses = {
    fr: {
      greetings: [
        "Bonjour ! Comment puis-je vous aider aujourd'hui ?",
        "Salut ! Que puis-je faire pour vous ?",
        "Bonsoir ! En quoi puis-je vous assister ?"
      ],
      location: [
        "Je suis un assistant virtuel, je n'ai pas d'adresse physique mais je suis ici pour vous aider !",
        "En tant qu'IA, j'existe dans le cloud, partout et nulle part √† la fois !",
        "Je vis dans le monde num√©rique, toujours disponible pour vous accompagner."
      ],
      general: [
        "C'est une excellente question ! Pouvez-vous me donner plus de d√©tails ?",
        "Int√©ressant ! J'aimerais en savoir plus sur ce que vous pensez.",
        "Je comprends votre point de vue. D√©veloppez un peu plus s'il vous pla√Æt."
      ]
    },
    ar: {
      greetings: [
        "ŸÖÿ±ÿ≠ÿ®ÿß! ŸÉŸäŸÅ ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ÿßŸÑŸäŸàŸÖÿü",
        "ÿ£ŸáŸÑÿß Ÿàÿ≥ŸáŸÑÿß! ŸÖÿßÿ∞ÿß ŸäŸÖŸÉŸÜŸÜŸä ÿ£ŸÜ ÿ£ŸÅÿπŸÑ ŸÑŸÉÿü",
        "ŸÖÿ≥ÿßÿ° ÿßŸÑÿÆŸäÿ±! ŸÉŸäŸÅ ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉÿü"
      ],
      location: [
        "ÿ£ŸÜÿß ŸÖÿ≥ÿßÿπÿØ ÿßŸÅÿ™ÿ±ÿßÿ∂Ÿäÿå ŸÑŸäÿ≥ ŸÑÿØŸä ÿπŸÜŸàÿßŸÜ ŸÖÿßÿØŸä ŸàŸÑŸÉŸÜŸÜŸä ŸáŸÜÿß ŸÑŸÖÿ≥ÿßÿπÿØÿ™ŸÉ!",
        "ŸÉŸàŸÜŸä ÿ∞ŸÉÿßÿ° ÿßÿµÿ∑ŸÜÿßÿπŸäÿå ÿ£ÿπŸäÿ¥ ŸÅŸä ÿßŸÑÿπÿßŸÑŸÖ ÿßŸÑÿ±ŸÇŸÖŸäÿå ŸÅŸä ŸÉŸÑ ŸÖŸÉÿßŸÜ ŸàŸÅŸä ÿ£Ÿä ŸÖŸÉÿßŸÜ!",
        "ÿ£ÿπŸäÿ¥ ŸÅŸä ÿßŸÑÿπÿßŸÑŸÖ ÿßŸÑÿ±ŸÇŸÖŸäÿå ŸÖÿ™ÿßÿ≠ ÿØÿßÿ¶ŸÖÿßŸã ŸÑŸÖÿ±ÿßŸÅŸÇÿ™ŸÉ ŸàŸÖÿ≥ÿßÿπÿØÿ™ŸÉ."
      ],
      general: [
        "ÿ≥ÿ§ÿßŸÑ ŸÖŸÖÿ™ÿßÿ≤! ŸáŸÑ ŸäŸÖŸÉŸÜŸÉ ÿ•ÿπÿ∑ÿßÿ¶Ÿä ÿßŸÑŸÖÿ≤ŸäÿØ ŸÖŸÜ ÿßŸÑÿ™ŸÅÿßÿµŸäŸÑÿü",
        "ŸÖÿ´Ÿäÿ± ŸÑŸÑÿßŸáÿ™ŸÖÿßŸÖ! ÿ£ŸàÿØ ÿ£ŸÜ ÿ£ÿπÿ±ŸÅ ÿßŸÑŸÖÿ≤ŸäÿØ ÿπŸÖÿß ÿ™ŸÅŸÉÿ± ŸÅŸäŸá.",
        "ÿ£ŸÅŸáŸÖ Ÿàÿ¨Ÿáÿ© ŸÜÿ∏ÿ±ŸÉ. ŸáŸÑ ŸäŸÖŸÉŸÜŸÉ ÿßŸÑÿ™Ÿàÿ≥ÿπ ÿ£ŸÉÿ´ÿ± ŸÖŸÜ ŸÅÿ∂ŸÑŸÉÿü"
      ]
    }
  };

  public generateResponse(context: ResponseContext): string {
    const { language, userInput } = context;
    const input = userInput.toLowerCase();
    
    console.log(`ü§ñ G√©n√©ration de r√©ponse en ${language} pour: "${userInput}"`);
    
    // D√©tection de salutations
    const greetingPatterns = {
      fr: ['bonjour', 'salut', 'bonsoir', 'hello', 'coucou'],
      ar: ['ŸÖÿ±ÿ≠ÿ®ÿß', 'ÿ£ŸáŸÑÿß', 'ÿ≥ŸÑÿßŸÖ', 'ÿµÿ®ÿßÿ≠ ÿßŸÑÿÆŸäÿ±', 'ŸÖÿ≥ÿßÿ° ÿßŸÑÿÆŸäÿ±', 'ÿ£ŸáŸÑÿß Ÿàÿ≥ŸáŸÑÿß']
    };
    
    if (greetingPatterns[language].some(pattern => input.includes(pattern))) {
      return this.getRandomResponse(this.responses[language].greetings);
    }
    
    // D√©tection de questions sur l'emplacement
    const locationPatterns = {
      fr: ['o√π', 'habite', 'vis', 'demeure', 'r√©sides', 'adresse'],
      ar: ['ÿ£ŸäŸÜ', 'ÿ™ÿ≥ŸÉŸÜ', 'ÿ™ÿπŸäÿ¥', 'ÿ™ŸÇŸäŸÖ', 'ÿπŸÜŸàÿßŸÜŸÉ', 'ŸÖŸÉÿßŸÜŸÉ']
    };
    
    if (locationPatterns[language].some(pattern => input.includes(pattern))) {
      return this.getRandomResponse(this.responses[language].location);
    }
    
    // R√©ponse g√©n√©rale
    return this.getRandomResponse(this.responses[language].general);
  }
  
  private getRandomResponse(responses: string[]): string {
    return responses[Math.floor(Math.random() * responses.length)];
  }
}
