
// G√©n√©rateur de r√©ponses simul√©es pour l'IA conversationnelle locale
// NOTE: Ceci est un moteur de chat basique avec des r√©ponses pr√©-programm√©es
// Pour une vraie IA, vous pourriez int√©grer OpenAI, Anthropic, ou un mod√®le local

const responses = {
  greetings: [
    "Bonjour ! Comment puis-je vous aider aujourd'hui ?",
    "Salut ! Que puis-je faire pour vous ?",
    "Hello ! Je suis l√† pour vous assister."
  ],
  
  questions: [
    "C'est une excellente question ! Laissez-moi r√©fl√©chir √† cela...",
    "Int√©ressant ! Voici ce que je pense de votre question :",
    "Bonne question ! D'apr√®s mon analyse :",
    "Permettez-moi de vous donner mon point de vue sur cela :"
  ],
  
  general: [
    "Je comprends votre pr√©occupation. Voici ma suggestion :",
    "C'est un sujet fascinant ! Voici mon analyse :",
    "Bas√© sur les informations disponibles, je dirais que :",
    "C'est une approche int√©ressante. Voici ce que je recommande :"
  ],
  
  contextual: [
    "D'apr√®s les meilleures pratiques, cette approche est g√©n√©ralement efficace.",
    "Cela d√©pend du contexte, mais en g√©n√©ral, je recommanderais cette solution.",
    "C'est un domaine complexe, mais voici une approche pratique.",
    "Il y a plusieurs fa√ßons d'aborder cela, mais voici la plus simple.",
    "Bas√© sur l'exp√©rience commune, cette m√©thode fonctionne bien."
  ],
  
  technical: [
    "Pour r√©soudre ce probl√®me technique, je sugg√®re cette approche :",
    "Voici une solution technique √©prouv√©e :",
    "D'un point de vue technique, cette m√©thode est recommand√©e :",
    "Pour optimiser cela, voici ce que je propose :"
  ]
};

const getRandomResponse = (category: keyof typeof responses): string => {
  const categoryResponses = responses[category];
  return categoryResponses[Math.floor(Math.random() * categoryResponses.length)];
};

const detectMessageType = (message: string): keyof typeof responses => {
  const lowerMessage = message.toLowerCase();
  
  if (lowerMessage.includes('bonjour') || lowerMessage.includes('salut') || lowerMessage.includes('hello')) {
    return 'greetings';
  }
  
  if (lowerMessage.includes('?') || lowerMessage.includes('comment') || lowerMessage.includes('pourquoi')) {
    return 'questions';
  }
  
  if (lowerMessage.includes('technique') || lowerMessage.includes('code') || lowerMessage.includes('d√©veloppement')) {
    return 'technical';
  }
  
  return 'general';
};

export const generateResponse = async (userMessage: string): Promise<string> => {
  // Simuler un d√©lai de traitement r√©aliste
  const processingTime = 800 + Math.random() * 1500;
  await new Promise(resolve => setTimeout(resolve, processingTime));

  // D√©tecter le type de message
  const messageType = detectMessageType(userMessage);
  
  // G√©n√©rer une r√©ponse contextuelle
  const mainResponse = getRandomResponse(messageType);
  const contextualInfo = getRandomResponse('contextual');
  
  // Construire la r√©ponse finale
  let finalResponse = mainResponse;
  
  // Ajouter une r√©f√©rence au message de l'utilisateur pour plus de contexte
  if (userMessage.length < 100) {
    finalResponse += ` Concernant "${userMessage}", ${contextualInfo}`;
  } else {
    finalResponse += ` ${contextualInfo}`;
  }
  
  return finalResponse;
};

// Fonction pour am√©liorer le moteur de chat avec de vraies capacit√©s d'IA
export const upgradeToRealAI = () => {
  console.log(`
ü§ñ MOTEUR DE CHAT ACTUEL : R√©ponses pr√©-programm√©es locales

Pour upgrader vers une vraie IA, vous pouvez :
1. Int√©grer OpenAI GPT-4 (n√©cessite une cl√© API)
2. Utiliser Anthropic Claude (n√©cessite une cl√© API)  
3. Installer un mod√®le local avec Ollama
4. Utiliser Google Gemini API
5. Int√©grer Cohere ou Hugging Face

Le code actuel garantit la confidentialit√© car tout reste local !
  `);
};
